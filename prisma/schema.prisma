generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(uuid())
  accountId    String
  refreshToken String
  userAgent    String?
  ipAddress    String?
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  account      Account  @relation(fields: [accountId], references: [id])
}

model SessionActivity {
  id        String   @id @default(uuid())
  accountId String
  activity  String
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())
}

model AccountAction {
  id        String   @id @default(uuid())
  accountId String
  action    String
  timestamp DateTime @default(now())
}

model ErrorLog {
  id        String   @id @default(uuid())
  message   String
  stack     String?
  context   String
  timestamp DateTime @default(now())
}

model LoginAttempt {
  id        String   @id @default(uuid())
  email     String
  success   Boolean
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  accountId String?
  timestamp DateTime @default(now())
  account   Account? @relation(fields: [accountId], references: [id])
}

model Account {
  id                 String               @id @default(cuid())
  name               String
  email              String?              @unique
  password           String?
  avatar             String?
  role               Role                 @default(BUYER)
  phone              String?
  address            String?
  profileImage       String?
  ewallet            String?
  isVerified         Boolean              @default(false)
  emailVerifiedAt    DateTime?
  tokenVersion       Int                  @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  referralCode       String?              @unique @default("")
  lastLoginAt        DateTime?
  referredById       String?
  wallet_balance     Float                @default(0)
  activityType       ActivityType?
  voucherType        VoucherType?
  city               String?
  country            String?
  province           String?
  currencyId         String?              @unique
  currency           Currency?            @relation("AccountCurrency", fields: [currencyId], references: [id])
  referredBy         Account?             @relation("AccountReferrals", fields: [referredById], references: [id])
  referrals          Account[]            @relation("AccountReferrals")
  accountsPayable    AccountsPayable[]
  accountsReceivable AccountsReceivable[]
  activities         Activity[]
  attendances        Attendance[]
  auditLogs          AuditLog[]
  cartItems          CartItem[]
  chatConversations  ChatConversation[]
  chatMessages       ChatMessage[]
  collaborations     Collaboration[]
  customerMetrics    CustomerMetric[]
  eventLogs          EventLog[]           @relation("AccountLogs")
  financialOverview  FinancialOverview[]
  loginAttempts      LoginAttempt[]
  messagesOwned      Message[]            @relation("AccountMessageOwner")
  messagesSent       Message[]            @relation("SenderAccount")
  orders             Order[]              @relation("AccountOrders")
  salesOrders        Order[]              @relation("AccountSellerOrders")
  payrolls           Payroll[]
  performances       Performance[]
  products           Product[]            @relation("AccountProducts")
  referralsReceived  Referral[]           @relation("Referred")
  referralsMade      Referral[]           @relation("Referrer")
  reviewsGiven       Review[]             @relation("AccountReviews")
  reviewsReceived    Review[]             @relation("SellerReviews")
  sales              Sales[]
  satisfactions      Satisfaction[]
  sessions           Session[]
  tasks              Task[]
  trainings          Training[]
  transaction        Transaction[]
  wallets            Wallet?
  wishlists          Wishlist[]
  workingHours       WorkingHours[]
  brands             Brand[]              @relation("AccountBrands")
  cities             City[]               @relation("AccountCities")
  markets            Market[]             @relation("AccountMarkets")
  conversations      Conversation[]       @relation("ConversationParticipants")
}

model Market {
  id           String     @id @default(cuid())
  name         String     @unique
  description  String?
  location     String     @default("Unknown")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  revenue      Float      @default(0.0)
  marketType   String?
  currencyId   String?
  joinDate     String?
  productCount Int?
  rating       Int?
  verified     Boolean?
  cityId       Int?
  regionId     Int?
  subRegionId  Int?
  city         City?      @relation(fields: [cityId], references: [id])
  currency     Currency?  @relation(fields: [currencyId], references: [id])
  region       Region?    @relation(fields: [regionId], references: [id])
  subRegion    SubRegion? @relation(fields: [subRegionId], references: [id])
  products     Product[]
  wishlists    Wishlist[]
  sellers      Account[]  @relation("AccountMarkets")
}

model Region {
  name        String      @unique
  description String?
  id          Int         @id @default(autoincrement())
  markets     Market[]
  subRegions  SubRegion[]
}

model SubRegion {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  regionId    Int
  cities      City[]
  markets     Market[]
  region      Region   @relation(fields: [regionId], references: [id])
}

model City {
  name        String
  description String?
  subRegionId Int
  id          Int       @id @default(autoincrement())
  subRegion   SubRegion @relation(fields: [subRegionId], references: [id])
  markets     Market[]
  account     Account[] @relation("AccountCities")
}

model Currency {
  id          String   @id @default(cuid())
  name        String
  description String?
  accountId   String
  code        String   @unique
  account     Account? @relation("AccountCurrency")
  markets     Market[]
}

model Product {
  id                String      @id @default(cuid())
  name              String
  description       String?
  price             Float
  originalPrice     Float?
  image             String?
  stock             Int         @default(0)
  soldCount         Int         @default(0)
  unit              String?
  brandId           String?
  accountId         String
  marketId          String
  ecoCertifications String?
  origin            String?
  sku               String?     @unique
  isActive          Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  isNewArrival      Boolean     @default(false)
  isBestSeller      Boolean     @default(false)
  isOnSale          Boolean     @default(false)
  isFeatured        Boolean     @default(false)
  duration          Int?
  activities        Activity[]
  cartItems         CartItem[]
  eventLogs         EventLog[]
  orderItems        OrderItem[]
  account           Account     @relation("AccountProducts", fields: [accountId], references: [id])
  brand             Brand?      @relation(fields: [brandId], references: [id])
  market            Market      @relation(fields: [marketId], references: [id])
  reviews           Review[]    @relation("ProductReviews")
  sales             Sales[]
  wishlists         Wishlist[]
  categories        Category[]  @relation("ProductCategories")
  labels            Label[]     @relation("ProductLabels")
  tags              Tag[]       @relation("ProductTags")
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  label     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[] @relation("ProductCategories")
}

model Brand {
  id          String    @id @default(cuid())
  name        String
  description String?
  label       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
  sellers     Account[] @relation("AccountBrands")
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] @relation("ProductTags")
}

model Label {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] @relation("ProductLabels")
}

model Order {
  id              String        @id @default(cuid())
  buyerId         String
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  shippingAddress String
  notes           String?
  totalPrice      Float
  voucherId       String?
  discountApplied Float         @default(0)
  shippedAt       DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  transactionId   String?
  cancelReason    String?
  items           Json
  paymentMethod   String
  sellerId        String
  eventLogs       EventLog[]
  buyer           Account       @relation("AccountOrders", fields: [buyerId], references: [id])
  seller          Account       @relation("AccountSellerOrders", fields: [sellerId], references: [id])
  voucher         Voucher?      @relation("OrderVoucher", fields: [voucherId], references: [id])
  orderItems      OrderItem[]
  transaction     Transaction?  @relation("OrderTransaction")
}

model OrderItem {
  id        String   @id @default(cuid())
  accountId String
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
}

model Voucher {
  id             String                 @id @default(cuid())
  code           String                 @unique
  discount       Float?
  value          Float?
  isActive       Boolean                @default(true)
  isRedeemed     Boolean                @default(false)
  redeemedAt     DateTime?
  expiryDate     DateTime?
  type           String
  createdBy      String
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  orders         Order[]                @relation("OrderVoucher")
  referrals      Referral[]
  redemptionLogs VoucherRedemptionLog[]
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @default(0)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accountId String
  sellerId  String
  productId String?
  account   Account  @relation("AccountReviews", fields: [accountId], references: [id])
  product   Product? @relation("ProductReviews", fields: [productId], references: [id])
  seller    Account  @relation("SellerReviews", fields: [sellerId], references: [id])
}

model Transaction {
  id            String                @id @default(cuid())
  accountId     String
  walletId      Int
  orderId       String?               @unique
  amount        Float
  method        String
  paymentDate   DateTime              @default(now())
  transactionId String?
  description   String?
  status        PaymentStatus         @default(PENDING)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  type          WalletTransactionType
  account       Account               @relation(fields: [accountId], references: [id])
  order         Order?                @relation("OrderTransaction", fields: [orderId], references: [id])
  wallet        Wallet                @relation(fields: [walletId], references: [id])
}

model EventLog {
  id        String   @id @default(cuid())
  event     String
  accountId String
  productId String?
  orderId   String?
  action    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  account   Account  @relation("AccountLogs", fields: [accountId], references: [id])
  order     Order?   @relation(fields: [orderId], references: [id])
  product   Product? @relation(fields: [productId], references: [id])
}

model Wallet {
  id           Int                    @id @default(autoincrement())
  accountId    String                 @unique
  balance      Float                  @default(0.0)
  currency     String
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  transactions Transaction[]
  account      Account                @relation(fields: [accountId], references: [id])
  logs         WalletTransactionLog[]
}

model WalletTransactionLog {
  id        String   @id @default(cuid())
  walletId  Int
  action    String
  oldValue  Json?
  newValue  Json?
  createdAt DateTime @default(now())
  wallet    Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model Referral {
  id         String   @id @default(cuid())
  referrerId String
  referredId String
  voucherId  String?
  createdAt  DateTime @default(now())
  referred   Account  @relation("Referred", fields: [referredId], references: [id])
  referrer   Account  @relation("Referrer", fields: [referrerId], references: [id])
  voucher    Voucher? @relation(fields: [voucherId], references: [id])
}

model Sales {
  id        Int      @id @default(autoincrement())
  amount    Float
  date      DateTime
  productId String
  accountId String
  role      String
  account   Account  @relation(fields: [accountId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Activity {
  id           Int      @id @default(autoincrement())
  productId    String
  activityType String
  date         DateTime
  accountId    String
  account      Account  @relation(fields: [accountId], references: [id])
  product      Product  @relation(fields: [productId], references: [id])
}

model Message {
  id             String       @id @default(cuid())
  content        String
  conversationId String
  senderId       String
  createdAt      DateTime     @default(now())
  accountId      String
  isRead         Boolean      @default(false)
  account        Account      @relation("AccountMessageOwner", fields: [accountId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  senderRole     Account      @relation("SenderAccount", fields: [senderId], references: [id])
}

model Conversation {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[]
  participants Account[] @relation("ConversationParticipants")
}

model Wishlist {
  id        String   @id @default(cuid())
  accountId String
  productId String
  marketId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  account   Account  @relation(fields: [accountId], references: [id])
  market    Market   @relation(fields: [marketId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([accountId, productId, marketId])
  @@index([accountId])
}

model VoucherRedemptionLog {
  id         String   @id @default(cuid())
  voucherId  String
  accountId  String?
  redeemedAt DateTime @default(now())
  status     String
  reason     String?
  voucher    Voucher  @relation(fields: [voucherId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  accountId String
  title     String?
  message   String
  type      String
  status    String
  reason    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id        Int          @id @default(autoincrement())
  status    String
  accountId String
  version   Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  logs      PaymentLog[]
}

model PaymentLog {
  id          Int      @id @default(autoincrement())
  paymentId   Int
  action      String
  reason      String
  status      String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  payment     Payment  @relation(fields: [paymentId], references: [id])
}

model AuditLog {
  id        String   @id @default(uuid())
  action    String
  orderId   String?
  accountId String
  reason    String?
  timestamp DateTime @default(now())
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model CartItem {
  id        String   @id @default(cuid())
  accountId String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([accountId, productId])
}

model AnalyticsEvent {
  id        String   @id @default(cuid())
  eventName String
  accountId String?
  metadata  Json?
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
}

model CustomerMetric {
  id                     String   @id @default(uuid())
  date                   DateTime
  activeUsers            Int?
  churnRate              Float?
  acquisitionCost        Float?
  newCustomers           Int?
  lifetimeValue          Float?
  retentionRate          Float?
  newCustomerCount       Int?
  returningCustomerCount Int?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  accountId              String
  account                Account  @relation(fields: [accountId], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  status    String
  accountId String
  account   Account  @relation(fields: [accountId], references: [id])

  @@index([accountId])
}

model Performance {
  id         Int      @id @default(autoincrement())
  score      Float
  reviewDate DateTime
  accountId  String
  account    Account  @relation(fields: [accountId], references: [id])

  @@index([accountId])
}

model Satisfaction {
  id                Int      @id @default(autoincrement())
  satisfactionScore Int
  surveyDate        DateTime
  accountId         String
  account           Account  @relation(fields: [accountId], references: [id])

  @@index([accountId])
}

model Payroll {
  id          Int      @id @default(autoincrement())
  salary      Float
  paymentDate DateTime
  accountId   String
  account     Account  @relation(fields: [accountId], references: [id])

  @@index([accountId])
}

model Task {
  id        Int      @id @default(autoincrement())
  taskName  String
  dueDate   DateTime
  accountId String
  account   Account  @relation(fields: [accountId], references: [id])

  @@index([accountId])
}

model Collaboration {
  id         Int      @id @default(autoincrement())
  score      Float
  reviewDate DateTime
  accountId  String
  account    Account  @relation(fields: [accountId], references: [id])

  @@index([accountId])
}

model Training {
  id               Int     @id @default(autoincrement())
  trainingCourse   String
  completionStatus String
  accountId        String
  account          Account @relation(fields: [accountId], references: [id])

  @@index([accountId])
}

model WorkingHours {
  id            Int      @id @default(autoincrement())
  hoursWorked   Float
  weekStartDate DateTime
  accountId     String
  account       Account  @relation(fields: [accountId], references: [id])

  @@index([accountId])
}

model FinancialOverview {
  id                          Int                      @id @default(autoincrement())
  accountId                   String
  netProfit                   Float
  operatingExpenses           Float
  profitMargin                Float
  refundsReturnsId            Int?                     @unique
  taxSummaryId                Int?                     @unique
  accountsPayable             AccountsPayable[]
  accountsReceivable          AccountsReceivable[]
  budgetVsActual              BudgetVsActual[]
  cashFlow                    CashFlow[]
  ebitda                      EBITDA[]
  account                     Account                  @relation(fields: [accountId], references: [id])
  refundsReturns              RefundsReturn?           @relation(fields: [refundsReturnsId], references: [id])
  taxSummary                  TaxSummary?              @relation(fields: [taxSummaryId], references: [id])
  financialRatiosCurrentRatio FinancialRatio[]         @relation("CurrentRatio")
  financialRatiosDebtToEquity FinancialRatio[]         @relation("DebtToEquity")
  financialRatio              FinancialRatio[]
  monthlyFinancialReport      MonthlyFinancialReport[]
  revenueBreakdowns           RevenueBreakdown[]

  @@index([accountId])
}

model AccountsPayable {
  id                  String            @id @default(cuid())
  vendor              String
  amount              Float
  dueDate             DateTime
  status              String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  accountId           String
  financialOverviewId Int
  account             Account           @relation(fields: [accountId], references: [id])
  financialOverview   FinancialOverview @relation(fields: [financialOverviewId], references: [id])
}

model AccountsReceivable {
  id                  String            @id @default(cuid())
  client              String
  dueDate             DateTime
  amount              Float
  status              ReceivableStatus
  accountId           String
  financialOverviewId Int
  account             Account           @relation(fields: [accountId], references: [id])
  financialOverview   FinancialOverview @relation(fields: [financialOverviewId], references: [id])
}

model BudgetVsActual {
  id                  Int               @id @default(autoincrement())
  month               String
  budget              Float
  actual              Float
  financialOverviewId Int
  financialOverview   FinancialOverview @relation(fields: [financialOverviewId], references: [id])
}

model CashFlow {
  id                  String            @id @default(cuid())
  type                CashFlowType
  description         String
  amount              Float
  createdAt           DateTime          @default(now())
  financialOverviewId Int
  financialOverview   FinancialOverview @relation(fields: [financialOverviewId], references: [id])
}

model EBITDA {
  id                  String            @id @default(cuid())
  month               String
  value               Float
  year                Int
  createdAt           DateTime          @default(now())
  financialOverviewId Int
  financialOverview   FinancialOverview @relation(fields: [financialOverviewId], references: [id])
}

model FinancialRatio {
  id                     String             @id @default(cuid())
  label                  String
  value                  Float
  createdAt              DateTime           @default(now())
  financialOverviewId    Int
  currentRatioOverviewId Int?
  debtToEquityOverviewId Int?
  currentRatioOverview   FinancialOverview? @relation("CurrentRatio", fields: [currentRatioOverviewId], references: [id])
  debtToEquityOverview   FinancialOverview? @relation("DebtToEquity", fields: [debtToEquityOverviewId], references: [id])
  financialOverview      FinancialOverview  @relation(fields: [financialOverviewId], references: [id])
}

model MonthlyFinancialReport {
  id                  String            @id @default(cuid())
  month               String
  revenue             Float
  expenses            Float
  year                Int
  createdAt           DateTime          @default(now())
  financialOverviewId Int
  financialOverview   FinancialOverview @relation(fields: [financialOverviewId], references: [id])
}

model NetProfit {
  id       Int   @id @default(autoincrement())
  revenue  Float
  expenses Float
}

model OperatingExpense {
  id       Int    @id @default(autoincrement())
  category String
  amount   Float
}

model ProfitMargin {
  id      Int   @id @default(autoincrement())
  revenue Float
  cost    Float
}

model RefundsReturn {
  id                  Int                @id @default(autoincrement())
  refunds             Float
  returns             Int
  financialOverviewId Int?               @unique
  financialOverview   FinancialOverview?
}

model RevenueBreakdown {
  id                  Int               @id @default(autoincrement())
  label               String
  amount              Float
  financialOverviewId Int
  financialOverview   FinancialOverview @relation(fields: [financialOverviewId], references: [id])
}

model TaxSummary {
  id                  Int                @id @default(autoincrement())
  financialOverviewId Int?               @unique
  taxAmount           Float
  taxRate             Float
  financialOverview   FinancialOverview?
}

model ChatConversation {
  id        String        @id @default(uuid())
  accountId String
  title     String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  role      Role
  account   Account       @relation(fields: [accountId], references: [id])
  messages  ChatMessage[]
}

model ChatMessage {
  id             String           @id @default(uuid())
  content        String
  role           String
  accountId      String
  conversationId String
  createdAt      DateTime         @default(now())
  account        Account          @relation(fields: [accountId], references: [id])
  conversation   ChatConversation @relation(fields: [conversationId], references: [id])
}

enum ReceivableStatus {
  Overdue
  Pending
  Paid
}

enum CashFlowType {
  Inflow
  Outflow
}

enum Role {
  ADMIN
  SELLER
  BUYER
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  SHIPPED
  DELIVERED
  AWAITING_PICKUP
  IN_TRANSIT
  OUT_FOR_DELIVERY
}

enum WalletTransactionType {
  TOPUP
  INITIAL
  WITHDRAW
  REFUND
  BILLS
  REVENUE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  SUCCESS
}

enum PaymentMethod {
  Wallet
}

enum ActivityType {
  VIEW
  PURCHASE
  LIKE
  SHARE
}

enum VoucherType {
  MANUAL
  REFERRAL
}
