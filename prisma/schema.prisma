generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  password        String
  avatar          String?
  role            Role      @default(CONSUMER)
  phone           String?
  address         String?
  profileImage    String?
  ewallet         String?
  isVerified      Boolean   @default(false)
  emailVerifiedAt DateTime?
  tokenVersion    Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  referralCode    String    @unique @default("")

  // Self-referencing relation
  referredById    String?
  referredBy      Account?  @relation("AccountReferrals", fields: [referredById], references: [id])
  referrals       Account[] @relation("AccountReferrals")

  // Other relations
  referralsMade   Referral[] @relation("Referrer")
  referralsReceived Referral[] @relation("Referred")

  reviewsGiven    Review[]   @relation("AccountReviews")
  reviewsReceived Review[]   @relation("SellerReviews")
  eventLogs       EventLog[] @relation("AccountLogs")
  orders          Order[]    @relation("AccountOrders")
  products        Product[]  @relation("AccountProducts")
  brands          Brand[]    @relation("AccountBrands")
  markets         Market[]   @relation("AccountMarkets")
  wallets         Wallet[]
  messages        Message[]
}

model Market {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  location    String    @default("Unknown")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  sellers     Account[] @relation("AccountMarkets")
  products    Product[] // Many-to-one relationship with products
  revenue     Float     @default(0.0)
}

model Product {
  id                String      @id @default(cuid())
  name              String
  description       String?
  price             Float
  originalPrice     Float?      // Original price before any discounts
  image             String?
  stock             Int         @default(0)
  soldCount         Int         @default(0)
  unit              String?
  tags              Tag[]       @relation("ProductTags")
  category          Category?   @relation(fields: [categoryId], references: [id])
  categoryId        String?
  brand             Brand?      @relation(fields: [brandId], references: [id])
  brandId           String?
  account           Account     @relation("AccountProducts", fields: [accountId], references: [id])
  accountId         String
  market            Market      @relation(fields: [marketId], references: [id])
  marketId          String
  orderItems        OrderItem[]

  reviews           Review[]    @relation("ProductReviews") // Reviews for this product

  ecoCertifications String?
  origin            String?
  sku               String?     @unique
  isActive          Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  eventLogs         EventLog[]
  labels            Label[]     @relation("ProductLabels")

  // Promotional flags
  isNewArrival      Boolean     @default(false) // Product created within 24 hours
  isBestSeller      Boolean     @default(false) // Manually set or calculated
  isOnSale          Boolean     @default(false) // Discount or voucher
  isFeatured        Boolean     @default(false) // Based on seller promotional package
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  product   Product[] // Products in this category
  label     String? // Optional: "Best Seller", "New Arrival", etc.
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Brand {
  id          String    @id @default(cuid())
  name        String
  description String?
  products    Product[] // Products in this category
  label       String? // Optional: "Best Seller", "New Arrival", etc.
  sellers     Account[] @relation("AccountBrands")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[] @relation("ProductTags")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Label {
  id        String    @id @default(cuid())
  name      String    @unique // Label name (e.g., "New Arrival", "Best Seller", etc.)
  products  Product[] @relation("ProductLabels")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id              String        @id @default(cuid())
  buyer           Account       @relation("AccountOrders", fields: [buyerId], references: [id])
  buyerId         String
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String
  shippingAddress String
  notes           String?
  totalPrice      Float
  orderItems      OrderItem[]
  voucher        Voucher?     @relation("OrderVoucher", fields: [voucherId], references: [id])
  voucherId      String?
  discountApplied Float         @default(0)
  shippedAt       DateTime?
  createdAt       DateTime      @default(now())
  transaction     Transaction?  @relation("OrderTransaction")
  transactionId   String?
  eventLogs       EventLog[]
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  productId String
  quantity  Int
}

model Voucher {
  id        String   @id @default(cuid())
  code      String   @unique
  discount  Float? // Discount amount or percentage
  value     Float?
  isActive  Boolean  @default(true)
  type      String    // "manual" or "referral"
  createdBy String?   // who created this voucher (user id or "system")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]  @relation("OrderVoucher")
  referrals  Referral[]
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @default(0)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Buyer - the one who wrote the review
  accountId String
  account   Account  @relation("AccountReviews", fields: [accountId], references: [id])

  // Seller - the one being reviewed
  sellerId  String
  seller    Account  @relation("SellerReviews", fields: [sellerId], references: [id])

  // Related Product (optional)
  productId String?
  product   Product? @relation("ProductReviews", fields: [productId], references: [id])
}

model Transaction {
  id          String        @id @default(cuid())
  order       Order         @relation("OrderTransaction", fields: [orderId], references: [id])
  orderId     String        @unique
  amount      Float
  paymentDate DateTime      @default(now())
  status      PaymentStatus @default(PENDING)
}

model EventLog {
  id        String   @id @default(cuid())
  event     String
  account   Account? @relation("AccountLogs", fields: [accountId], references: [id])
  accountId String
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?
  action    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wallet {
  id        Int    @id @default(autoincrement())
  accountId String
  balance   Float  @default(0.0)
  currency  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to the user (if applicable)
  account   Account  @relation(fields: [accountId], references: [id])
}

model Referral {
  id          String   @id @default(cuid())
  referrerId  String
  referrer    Account  @relation("Referrer", fields: [referrerId], references: [id])
  referredId  String
  referred    Account  @relation("Referred", fields: [referredId], references: [id])
  voucherId  String?
  voucher    Voucher? @relation(fields: [voucherId], references: [id])
  createdAt   DateTime @default(now())
}

model Sales {
  id        Int      @id @default(autoincrement())
  amount    Float
  date      DateTime
  productId Int
  accountId Int
  role      String
}

model Activity {
  id            Int      @id @default(autoincrement())
  productId     Int
  activityType  String
  date          DateTime
  accountId     Int
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  accountId String
  account   Account  @relation(fields: [accountId], references: [id])
  isRead    Boolean  @default(false)  // Whether the message has been read or not
}

enum Role {
  ADMIN
  SELLER
  CONSUMER
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  SHIPPED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  Wallet
}
