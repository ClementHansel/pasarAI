generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(cuid())
  name            String
  email           String     @unique
  password        String
  role            Role       @default(CONSUMER)
  phone           String?
  address         String?
  profileImage    String?
  ewallet         String?
  isVerified      Boolean    @default(false)
  emailVerifiedAt DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  tokenVersion    Int        @default(0)
  orders          Order[] // Orders placed by the user
  reviews         Review[] // Reviews written by the user
  eventLogs       EventLog[] // Event logs related to user actions
}

model Market {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  location    String    @default("Unknown")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  sellers     Seller[]  @relation("MarketSellers")
  products    Product[] // Many-to-one relationship with products
  revenue     Float     @default(0.0)
}

model Seller {
  id              String     @id @default(cuid())
  name            String
  email           String     @unique
  password        String
  role            Role       @default(SELLER)
  phone           String?
  address         String?
  profileImage    String?
  isVerified      Boolean    @default(false)
  emailVerifiedAt DateTime?
  tokenVersion    Int        @default(0)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  markets         Market[]   @relation("MarketSellers")
  products        Product[] // Many-to-one relationship with products
  brands          Brand[]    @relation("BrandSellers")
  eventLogs       EventLog[] // Event logs related to seller actions
}

model Product {
  id                String      @id @default(cuid())
  name              String
  description       String?
  price             Float
  originalPrice     Float? // Original price before any discounts
  image             String?
  stock             Int         @default(0)
  soldCount         Int         @default(0)
  unit              String?
  tags              Tag[]       @relation("ProductTags")
  category          Category?   @relation(fields: [categoryId], references: [id])
  categoryId        String?
  brand             Brand?      @relation(fields: [brandId], references: [id])
  brandId           String?
  seller            Seller      @relation(fields: [sellerId], references: [id])
  sellerId          String
  market            Market      @relation(fields: [marketId], references: [id])
  marketId          String
  orderItems        OrderItem[]
  ecoCertifications String?
  origin            String?
  sku               String?     @unique
  isActive          Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  reviews           Review[]    @relation("ProductReviews")
  eventLogs         EventLog[]
  labels            Label[]     @relation("ProductLabels")
  isNewArrival      Boolean     @default(false) // Flag for new arrivals (product created within 24 hours)
  isBestSeller      Boolean     @default(false) // Flag for best sellers (manually set or calculated)
  isOnSale          Boolean     @default(false) // Flag for sale products (discount or voucher)
  isFeatured        Boolean     @default(false) // Flag for featured products (based on seller promotional package)
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  product   Product[] // Products in this category
  label     String? // Optional: "Best Seller", "New Arrival", etc.
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Brand {
  id          String    @id @default(cuid())
  name        String    
  description String?
  products    Product[] // Products in this category
  label       String? // Optional: "Best Seller", "New Arrival", etc.
  sellers     Seller[]  @relation("BrandSellers")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[] @relation("ProductTags")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Label {
  id        String    @id @default(cuid())
  name      String    @unique // Label name (e.g., "New Arrival", "Best Seller", etc.)
  products  Product[] @relation("ProductLabels")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id              String        @id @default(cuid())
  buyer           User          @relation(fields: [buyerId], references: [id])
  buyerId         String
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String
  shippingAddress String
  notes           String?
  totalPrice      Float
  orderItems      OrderItem[]
  giftcard         Giftcard?      @relation("OrderGiftcard", fields: [giftcardId], references: [id])
  giftcardId       String?
  discountApplied Float         @default(0)
  shippedAt       DateTime?
  createdAt       DateTime      @default(now())
  transaction     Transaction?  @relation("OrderTransaction")
  transactionId   String?
  eventLogs       EventLog[]
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  productId String
  quantity  Int
}

model Giftcard {
  id        String   @id @default(cuid())
  code      String   @unique
  discount  Float // Discount amount or percentage
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]  @relation("OrderGiftcard")
}

model Review {
  id        String   @id @default(cuid())
  product   Product  @relation("ProductReviews", fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  rating    Int      @default(0)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id          String        @id @default(cuid())
  order       Order         @relation("OrderTransaction", fields: [orderId], references: [id])
  orderId     String        @unique
  amount      Float
  paymentDate DateTime      @default(now())
  status      PaymentStatus @default(PENDING)
}

model EventLog {
  id        String   @id @default(cuid())
  event     String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
  seller    Seller?  @relation(fields: [sellerId], references: [id])
  sellerId  String?
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?
  action    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  SELLER
  CONSUMER
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  SHIPPED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  Wallet
}