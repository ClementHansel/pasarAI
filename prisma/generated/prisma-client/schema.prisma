generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  password        String
  role            Role      @default(CONSUMER)
  phone           String?
  address         String?
  profileImage    String?
  isVerified      Boolean   @default(false)
  emailVerifiedAt DateTime?
  createdAt       DateTime  @default(now())
  tokenVersion    Int       @default(0)
  products        Product[] @relation("UserProducts")
  orders          Order[]
  reviews         Review[]
}

model Product {
  id                String      @id @default(cuid())
  name              String
  description       String?
  price             Float
  image             String?
  stock             Int         @default(0)
  soldCount         Int         @default(0)
  unit              String?
  tags              String[]
  category          Category?   @relation(fields: [categoryId], references: [id])
  categoryId        String?
  seller            User        @relation("UserProducts", fields: [sellerId], references: [id])
  sellerId          String
  orderItems        OrderItem[]
  ecoCertifications String?
  origin            String?
  sku               String?
  isActive          Boolean     @default(true)
  createdAt         DateTime    @default(now())
  reviews           Review[]    @relation("ProductReviews")
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Order {
  id              String        @id @default(cuid())
  buyer           User          @relation(fields: [buyerId], references: [id])
  buyerId         String
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  shippingAddress String
  notes           String?
  totalPrice      Float
  orderItems      OrderItem[]
  voucher         Voucher?      @relation("OrderVoucher", fields: [voucherId], references: [id])
  voucherId       String?
  discountApplied Float         @default(0)
  shippedAt       DateTime?
  createdAt       DateTime      @default(now())
  transaction     Transaction?  @relation("OrderTransaction")
  transactionId   String?
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
}

model Voucher {
  id        String   @id @default(cuid())
  code      String   @unique
  discount  Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]  @relation("OrderVoucher")
}

model Review {
  id        String   @id @default(cuid())
  product   Product  @relation("ProductReviews", fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  rating    Int      @default(0)
  comment   String?
  createdAt DateTime @default(now())
}

model Transaction {
  id          String        @id @default(cuid())
  order       Order         @relation("OrderTransaction", fields: [orderId], references: [id])
  orderId     String        @unique // Make orderId unique to ensure one-to-one relationship
  amount      Float
  paymentDate DateTime      @default(now())
  status      PaymentStatus @default(PENDING)
}

model EventLog {
  id        String   @id @default(cuid())
  event     String
  userId    String?
  productId String?
  action    String
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  SELLER
  CONSUMER
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  SHIPPED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
